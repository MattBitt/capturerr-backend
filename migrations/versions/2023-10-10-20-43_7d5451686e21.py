# type: ignore
"""asdf

Revision ID: 7d5451686e21
Revises: d3d7ce7a7133
Create Date: 2023-10-10 20:43:32.040254

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "7d5451686e21"
down_revision = "d3d7ce7a7133"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("captures_ancient")
    op.drop_table("tag")
    op.drop_constraint("captures_uupk_key", "captures", type_="unique")
    op.drop_column("captures", "uupk")
    op.drop_column("captures", "user_pk")
    op.add_column("tags", sa.Column("name", sa.String(length=200), nullable=False))
    op.drop_column("tags", "title")
    op.drop_column("tags", "platform")
    op.drop_column("tags", "genre")
    op.drop_column("tags", "price")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "tags",
        sa.Column("price", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "tags",
        sa.Column("genre", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "tags",
        sa.Column("platform", sa.VARCHAR(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "tags",
        sa.Column("title", sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    )
    op.drop_column("tags", "name")
    op.add_column(
        "captures",
        sa.Column("user_pk", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "captures",
        sa.Column("uupk", sa.UUID(), autoincrement=False, nullable=False),
    )
    op.create_unique_constraint("captures_uupk_key", "captures", ["uupk"])
    op.create_table(
        "tag",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("pk", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("account_pk", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("pk", name="tag_pkey"),
    )
    op.create_table(
        "captures_ancient",
        sa.Column("pk", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("uupk", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("text", sa.VARCHAR(length=200), autoincrement=False, nullable=False),
        sa.Column("notes", sa.VARCHAR(length=200), autoincrement=False, nullable=True),
        sa.Column("flagged", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "priority",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "captured_time",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "happend_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "captured_longitude",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "captured_latitude",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "due_date",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("user_pk", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("is_active", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("account_pk", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "deleted_at",
            postgresql.TIMESTAMP(),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("pk", name="captures_ancient_pkey"),
        sa.UniqueConstraint("uupk", name="captures_ancient_uupk_key"),
    )
    # ### end Alembic commands ###
